@using UserAuthClient.Web.Lib
@using System.Text.RegularExpressions

@code {

    public class PasswordValidation : SourceContext
    {
        
        public string PasswordField { get; set; } = IIdentity.CreateUUID;
        
        public PasswordValidation(SourceElement sourceElement, string tag, string tagValue) : 
            base(tag, tagValue)
        {
            sourceElement.WithDecorator(tag, tagValue, ((Action<ValidatableElement>) (
            (source) =>
            {
                source.Classes.Add("password authgroup");
                source.OnMessageChange("test");

                string lastMessage = "";

                source.ValidationInputType = "password";

                void PasswordChecking(string s)
                {
                    string status = CheckPassword(s, out var messages);
                    
                    if (status != "")
                    {
                        lastMessage = status;
                    }
                    
                    if (s.Length == 0)
                    {
                        messages.Clear();
                    }
                    
                    source.OnMessageChange(lastMessage);
                    
                    SourceElement.GetComponent(source, source.ValidationMessage, out TextElement textElement);
                    
                    textElement.SetStyle = new()
                    {
                        Key = "height",
                        Value = messages.Count == 0 ? "0%" : "100%"
                    };
                }
                
                source.OnInputEnter += (s) =>
                {
                    sourceElement.StateChanged();
                };

                source.OnComponentFinishedInit += ()=>
                {
                    SourceElement.GetComponent(source, source.ValidationInput, out InputComponent inputElement);

                    inputElement.WhenKeyPressed += (val)=>
                    {
                        PasswordChecking(val);
                        sourceElement.StateChanged();
                    };
                };
                //inputElement.OnKeyInput += PasswordChecking;
                
                source.StateChanged();
            })), 
            
            label =>
                @<ValidatableElement
                     Parent=@sourceElement
                     Tag=@label
                     UUID=@PasswordField>
                </ValidatableElement>,
            true);
        }
        
        public string CheckPassword(string check, out List<string> messages)
        {
            if (check is null || check == "") check="";
            check = check.Trim();
                    
            int startsWithLetter = check.Length==0? 0:Regex.Match(check[0].ToString(), "^[a-zA-Z]").Length;
            bool aSymbol = Regex.IsMatch(check, "[!@#$%^&*()]");
            bool aNumber = Regex.IsMatch(check, "[0-9]");
            bool capital = Regex.IsMatch(check, "[A-Z]");
            int charCount = check.Length;

            string Message1;
            string Message2;
            string Message3;
            string Message4;
                    
            messages = new()
            {
                (Message1="Must have a special character"),
                (Message2="Must have a number"),
                (Message3="Must have a capital letter"),
                (Message4="Must have at least 8 characters")
            };
                    
            if (aSymbol)
            {
                messages.Remove(Message1);
            }

            if (aNumber)
            {
                messages.Remove(Message2);
            }

            if (capital)
            {
                messages.Remove(Message3);
            }
            if (charCount >= 8)
            {
                messages.Remove(Message4);
            }
        
            return string.Join(". ", messages);
        }
    }
}

