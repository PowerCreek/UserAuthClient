@using System.Text.RegularExpressions
@using UserAuthClient.Web.Lib

@code {

    public class UsernameValidation : SourceContext
    {
        
        public string UsernameMessageId { get; set; } = IIdentity.CreateUUID;
        public string UsernameInputId { get; set; } = IIdentity.CreateUUID;

        public TextElement UsernameMessage => GetExposedComponent(UsernameMessageId, nameof(ValidatableElement.ValidationMessage), out TextElement _);
        public InputComponent UsernameInput => GetExposedComponent(UsernameInputId, nameof(ValidatableElement.ValidationInput), out InputComponent _);

        public UsernameValidation(SourceElement sourceElement, string tag, string tagValue) : 
            base(tag, tagValue)
        {
            sourceElement.WithDecorator(tag, tagValue, ((Action<ValidatableElement>) (
                (source) =>
                {
                    
                    source.Classes.Add("username authgroup");
                    string lastMessage = "";

                    void UsernameChecking(string s)
                    {
                        string status = CheckUserName(s, out var messages);

                        if (status != "")
                        {
                            lastMessage = status;
                        }

                        if (s.Length == 0)
                        {
                            messages.Clear();
                        }

                        source.OnMessageChange(lastMessage);

                        SourceElement.GetComponent(source, source.ValidationMessage,
                            out TextElement textElement);

                        textElement.SetStyle = new()
                        {
                            Key = "height",
                            Value = messages.Count == 0 ? "0%" : "100%"
                        };
                    }

                    source.OnInputEnter += (val) =>
                    {
                        UsernameChecking(val);
                        sourceElement.StateChanged();
                    };

                    source.OnComponentFinishedInit += () =>
                    {
                        SourceElement.GetComponent(source, source.ValidationInput,
                            out InputComponent inputElement);

                        inputElement.WhenKeyPressed += (val) =>
                        {
                            UsernameChecking(val);
                            sourceElement.StateChanged();
                        };
                    };

                    Console.WriteLine(source.UUID);
                    source.StateChanged();
                })),

                label =>
                    @<ValidatableElement
                         Parent=@sourceElement
                         Tag=@label
                         UUID=@UsernameMessageId
                             >
                    </ValidatableElement>,
                true);
        }
        
        public string CheckUserName(string check, out List<string> messages)
        {
            if (check is null || check == "") check = "";
            check = check.Trim();

            int startsWithLetter = check.Length == 0 ? 0 : Regex.Match(check[0].ToString(), "^[a-zA-Z]").Length;
            int noSymbols = Regex.Match(check, "[a-zA-Z0-9]{0,}").Length;
            int charCount = check.Length;

            string Message1;
            string Message2;
            string Message3;

            messages = new()
            {
                (Message1 = "Must start with a letter."),
                (Message2 = "No special characters."),
                (Message3 = "Between 3-9 characters")
            };

            if (startsWithLetter == 1)
            {
                messages.Remove(Message1);
            }

            if (noSymbols == check.Length)
            {
                messages.Remove(Message2);
            }

            if (charCount >= 3 && charCount <= 9)
            {
                messages.Remove(Message3);
            }

            return string.Join("<br/>", messages);
        }
    }
}