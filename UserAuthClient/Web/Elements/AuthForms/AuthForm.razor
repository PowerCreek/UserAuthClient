@using UserAuthClient.Web.Lib
@using Microsoft.Extensions.Options
@using System.Text.RegularExpressions
@using System.Diagnostics.Tracing
@using UserAuthClient.Web.Elements.AuthForms.Validation
@using static UserAuthClient.Web.Elements.AuthForms.Validation.UsernameValidationContext
@using static UserAuthClient.Web.Elements.AuthForms.Validation.PasswordValidationContext

@inherits SourceElement

@BuildRenderItem()

@code {

    [Parameter]
    public AuthFormOptions AuthFormOptions { get; set; } = new AuthFormOptions{};
    
    public readonly string AuthFormContainer = IIdentity.CreateUUID;
    
    public override RenderFragment BuildRenderItem(Func<RenderFragment> induce = null)
    {
        return base.BuildRenderItem(() =>
        {
            return
                @<SourceElement Parent=@this Tag=@AuthFormContainer>
                    @foreach (var renderItems in GetRenderItems())
                    {
                        @renderItems
                    }
                </SourceElement>;
        });
    }
    
    string UsernameValidationContextA = IIdentity.CreateUUID;
    string UsernameValidationContext = IIdentity.CreateUUID;
    string PasswordValidationContext = IIdentity.CreateUUID;
    
    public AuthForm()
    {
        
        WithComponent<UsernameValidation>(nameof(UsernameValidationContextA), UsernameValidationContextA);
        WithComponent<UsernameValidation>(nameof(UsernameValidationContext), UsernameValidationContext);
        WithComponent<PasswordValidation>(nameof(PasswordValidationContext), PasswordValidationContext);

        Task.Delay(1000).ContinueWith(async e => { });
        
        WhenInitialized(AuthFormContainer, ((Action<SourceElement>) (
            (source) =>
            {
                source.Classes.Add("authform");
        })));
    }
}