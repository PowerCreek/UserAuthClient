@using UserAuthClient.Web.Lib
@using Microsoft.Extensions.Options
@using System.Text.RegularExpressions
@using System.Diagnostics.Tracing
@inherits SourceElement

@BuildRenderItem()

@code {

    [Parameter]
    public AuthFormOptions AuthFormOptions { get; set; } = new AuthFormOptions{};
    
    public readonly string AuthFormContainer = IIdentity.CreateUUID;
    
    public override RenderFragment BuildRenderItem(Func<RenderFragment> induce = null)
    {
        return base.BuildRenderItem(() =>
        {
            return
                @<SourceElement Parent=@this Tag=@AuthFormContainer>
                    @foreach (var renderItems in GetRenderItems())
                    {
                        @renderItems
                    }
                </SourceElement>;
        });
    }

    public readonly string UsernameContainer = IIdentity.CreateUUID;
    public readonly string PasswordContainer = IIdentity.CreateUUID;

    public string CheckUserName(string check, out List<string> messages)
    {
        if (check is null || check == "") check="";
        check = check.Trim();
                    
        int startsWithLetter = check.Length==0? 0:Regex.Match(check[0].ToString(), "^[a-zA-Z]").Length;
        int noSymbols = Regex.Match(check, "[a-zA-Z0-9]{0,}").Length;
        int charCount = check.Length;

        string Message1;
        string Message2;
        string Message3;
                    
        messages = new()
        {
            (Message1="Must start with a letter."),
            (Message2="No special characters."),
            (Message3="Between 3-9 characters")
        };
                    
        if (startsWithLetter == 1)
        {
            messages.Remove(Message1);
        }

        if (noSymbols == check.Length)
        {
            messages.Remove(Message2);
        }

        if (charCount >= 3 && charCount <= 9)
        {
            messages.Remove(Message3);
        }
        
        return string.Join("<br/>", messages);
    }

    public string CheckPassword(string check, out List<string> messages)
    {
        if (check is null || check == "") check="";
        check = check.Trim();
                    
        int startsWithLetter = check.Length==0? 0:Regex.Match(check[0].ToString(), "^[a-zA-Z]").Length;
        bool aSymbol = Regex.IsMatch(check, "[!@#$%^&*()]");
        bool aNumber = Regex.IsMatch(check, "[0-9]");
        bool capital = Regex.IsMatch(check, "[A-Z]");
        int charCount = check.Length;

        string Message1;
        string Message2;
        string Message3;
        string Message4;
                    
        messages = new()
        {
            (Message1="Must have a special character"),
            (Message2="Must have a number"),
            (Message3="Must have a capital letter"),
            (Message4="Must have at least 8 characters")
        };
                    
        if (aSymbol)
        {
            messages.Remove(Message1);
        }

        if (aNumber)
        {
            messages.Remove(Message2);
        }

        if (capital)
        {
            messages.Remove(Message3);
        }
        if (charCount >= 8)
        {
            messages.Remove(Message4);
        }
        
        return string.Join(". ", messages);
    }
    
    public AuthForm()
    {
        
        WithDecorator(nameof(UsernameContainer), UsernameContainer, ((Action<ValidatableElement>) (
            (source) =>
            {
                source.Classes.Add("username authgroup");
                string lastMessage = "";
                
                void UsernameChecking(string s)
                {
                    string status = CheckUserName(s, out var messages);
                
                    if (status != "")
                    {
                        lastMessage = status;
                    }
                    if (s.Length == 0)
                    {
                        messages.Clear();
                    }
                
                    source.OnMessageChange(lastMessage);
                
                    GetComponent(source, source.ValidationMessage, out TextElement textElement);
                
                    textElement.SetStyle = new()
                    {
                        Key = "height",
                        Value = messages.Count == 0 ? "0%" : "100%"
                    };
                }
                
                source.OnInputEnter += (val) =>
                {
                    UsernameChecking(val);
                    StateChanged();
                };
                
                source.OnComponentFinishedInit += ()=>
                {
                    GetComponent(source, source.ValidationInput, out InputComponent inputElement);

                    inputElement.WhenKeyPressed += (val)=>
                    {
                        UsernameChecking(val);
                        StateChanged();
                    };
                };
                
                source.StateChanged();
            })), 
            
            label =>
                @<ValidatableElement
                     Parent=@this
                     Tag=@label>
                </ValidatableElement>, 
            AuthFormOptions.ShowUsername);
        
        
        WithDecorator(nameof(PasswordContainer), PasswordContainer, ((Action<ValidatableElement>) (
            (source) =>
            {
                source.Classes.Add("password authgroup");
                source.OnMessageChange("test");

                string lastMessage = "";

                source.ValidationInputType = "password";

                void PasswordChecking(string s)
                {
                    string status = CheckPassword(s, out var messages);
                    
                    if (status != "")
                    {
                        lastMessage = status;
                    }
                    
                    if (s.Length == 0)
                    {
                        messages.Clear();
                    }
                    
                    source.OnMessageChange(lastMessage);
                    
                    GetComponent(source, source.ValidationMessage, out TextElement textElement);
                    
                    textElement.SetStyle = new()
                    {
                        Key = "height",
                        Value = messages.Count == 0 ? "0%" : "100%"
                    };
                }
                
                source.OnInputEnter += (s) =>
                {
                    StateChanged();
                };

                source.OnComponentFinishedInit += ()=>
                {
                    GetComponent(source, source.ValidationInput, out InputComponent inputElement);

                    inputElement.WhenKeyPressed += (val)=>
                    {
                        PasswordChecking(val);
                        StateChanged();
                    };
                };
                //inputElement.OnKeyInput += PasswordChecking;
                
                source.StateChanged();
            })), 
            
            label =>
                @<ValidatableElement
                     Parent=@this
                     Tag=@label>
                </ValidatableElement>,
            AuthFormOptions.ShowPassword);

        WhenInitialized(AuthFormContainer, ((Action<SourceElement>) (
            (source) =>
            {
                source.Classes.Add("authform");
        })));

    }
    
}